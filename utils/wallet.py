import cryptocode as cc
from pyrogram.types import Message
from .misc import user, wallet_path, claimed_tokens_path
from . import log
import os.path

wallet_file = wallet_path+f'wallet_{user.me.id}.crypto'

class GiveError(Exception):
    pass

class ClaimError(Exception):
    pass

class GiveInfo:
    crypto: str
    crypto_password: str
    new_balance: float

class ClaimInfo:
    claim_from: int
    claim_value: float
    old_balance = float
    new_balance: float

class wallet:
    cryptokey = f'{str(user.me.phone_number)}{str(user.me.id)}'
    balance: float # ⨝

def read_balance() -> float:
    try:
        with open(wallet_file, 'r', encoding="utf-8") as f:
            cry = f.read()
            bal = float(cc.decrypt(str(cry), wallet.cryptokey))
            log.write.info('Wallet.core',f'Function read_balance(): User balance now: {bal} ⨝')
            f.close()
            if bal != '':
                return bal
            else:
                raise
    except:
        print('Создаём новый кошелек для вашего аккаунта')
        with open(wallet_file, 'w+', encoding="utf-8") as f:
            cry = cc.encrypt(str(float(10)), wallet.cryptokey)
            f.write(cry)
            f.close()
            log.write.info('Wallet.core',f'Created new wallet for user {user.me.id} / {user.me.phone_number} with 10.0 ⨝')
            return float(10)
        
def add_balance(val: float) -> float:
    wallet.balance = wallet.balance + val
    with open(wallet_file, 'w', encoding="utf-8") as f:
        f.write(cc.encrypt(str(wallet.balance), wallet.cryptokey))
        f.close()
    log.write.info('Wallet.core',f'Added {val} ⨝ to user balance')
    return wallet.balance

def remove_balance(val: float) -> float:
    wallet.balance = wallet.balance - val
    with open(wallet_file, 'w', encoding="utf-8") as f:
        f.write(cc.encrypt(str(wallet.balance), wallet.cryptokey))
        f.close()
    log.write.info('Wallet.core',f'Removed {val} ⨝ from user balance')
    return wallet.balance

def add_claimed_token(token: str) -> None:
    with open(claimed_tokens_path, 'a+', encoding="utf-8") as f:
        f.write(token)
        f.close()
    log.write.info('Wallet.core',f'Function add_claimed_token : Token {token} is claimed now')

def check_claimed_token(token: str) -> bool:
    if not os.path.exists(claimed_tokens_path):
        with open(claimed_tokens_path, 'w+') as w:
            w.close()
    with open(claimed_tokens_path, 'r+') as f:
        tokens = f.read()
        f.close()
        if token in tokens:
            return True
        else:
            return False

def register_give(message: Message, val: float) -> GiveInfo:
    from_user = str(message.from_user.id)
    to_user = str(message.chat.id)

    if val > wallet.balance:
        log.write.warn('Wallet.give',f'GIVE token can`t be generated by reason: {val} > {wallet.balance}')
        raise GiveError(f"Can't create give, value ({val} **⨝**) > wallet balance ({wallet.balance} **⨝**)")
    else:
        GiveInfo.crypto_password = str(to_user+from_user)
        GiveInfo.crypto = cc.encrypt(str(val), str(to_user+from_user))
        GiveInfo.new_balance = remove_balance(val)
        log.write.info('Wallet.give',f'Created new GIVE token: from {from_user} to {to_user}, value: {val} ⨝, new balance: {wallet.balance}\nToken:{GiveInfo.crypto} | password: {GiveInfo.crypto_password}')

        return GiveInfo
    
def claim_give(message: Message) -> str:
    from_user = str(message.reply_to_message.from_user.id)
    to_user = str(message.from_user.id)
    token = message.reply_to_message.text.split('#')[1]
    if not check_claimed_token(token):
        add_claimed_token(token)
        result = float(cc.decrypt(token,str(to_user+from_user)))
        ClaimInfo.claim_from = message.reply_to_message.from_user.mention()
        ClaimInfo.old_balance = wallet.balance
        if result:
            ClaimInfo.claim_value = result
            add_balance(result)
            ClaimInfo.new_balance = wallet.balance
            message.reply_to_message.delete()
            return ClaimInfo
        else:
            raise GiveError('Wrong password/crypto')
    else:
        raise ClaimError('Token is activated yet')
        
wallet.balance = read_balance() # ⨝